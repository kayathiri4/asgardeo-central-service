/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.wso2.identity.asgardeo.central.service.rest.api.v1;

import com.wso2.identity.asgardeo.central.service.rest.api.v1.model.Error;
import com.wso2.identity.asgardeo.central.service.rest.api.v1.model.TenantReserveRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Tenants", description = "the Tenants API")
public interface TenantsApi {

    default TenantsApiDelegate getDelegate() {
        return new TenantsApiDelegate() {};
    }

    /**
     * POST /tenant : Reserve tenant by new user in the sign up.
     * This API provides the capability to create tenants from the new asgardeo users at the sign up. 
     *
     * @param tenantReserveRequest This represents the tenant to be created. (required)
     * @return Item Created (status code 201)
     *         or Invalid Input Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Resource Forbidden (status code 403)
     *         or Element Already Exists (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "addTenantForRegistration",
        summary = "Reserve tenant by new user in the sign up.",
        description = "This API provides the capability to create tenants from the new asgardeo users at the sign up. ",
        tags = { "Tenants" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Item Created"),
            @ApiResponse(responseCode = "400", description = "Invalid Input Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Resource Forbidden"),
            @ApiResponse(responseCode = "409", description = "Element Already Exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tenant",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addTenantForRegistration(
        @Parameter(name = "TenantReserveRequest", description = "This represents the tenant to be created.", required = true) @Valid @RequestBody TenantReserveRequest tenantReserveRequest
    ) {
        return getDelegate().addTenantForRegistration(tenantReserveRequest);
    }


    /**
     * DELETE /tenant : Delete tenant.
     * This API provides the capability to delete tenant. 
     *
     * @param tenantId Tenant ID of the tenant. (required)
     * @return Item Deleted (status code 204)
     *         or Invalid Input Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Resource Forbidden (status code 403)
     *         or Tenant Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteTenant",
        summary = "Delete tenant.",
        description = "This API provides the capability to delete tenant. ",
        tags = { "Tenants" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Item Deleted"),
            @ApiResponse(responseCode = "400", description = "Invalid Input Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Resource Forbidden"),
            @ApiResponse(responseCode = "404", description = "Tenant Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tenant",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteTenant(
        @NotNull @Parameter(name = "tenantId", description = "Tenant ID of the tenant.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "tenantId", required = true) String tenantId
    ) {
        return getDelegate().deleteTenant(tenantId);
    }


    /**
     * GET /tenant/check-domain : Check domain Existence.
     * Check the tenant existence. 
     *
     * @param domain Domain name of the user&#39;s current tenant. (required)
     * @param username Base64 encoded username of the tenant admin. (required)
     * @return Tenant Exist (status code 200)
     *         or Invalid Input Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Resource Forbidden (status code 403)
     *         or Tenant Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "isDomainExist",
        summary = "Check domain Existence.",
        description = "Check the tenant existence. ",
        tags = { "Tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tenant Exist"),
            @ApiResponse(responseCode = "400", description = "Invalid Input Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Resource Forbidden"),
            @ApiResponse(responseCode = "404", description = "Tenant Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tenant/check-domain",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> isDomainExist(
        @NotNull @Parameter(name = "domain", description = "Domain name of the user's current tenant.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "domain", required = true) String domain,
        @NotNull @Parameter(name = "username", description = "Base64 encoded username of the tenant admin.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = true) String username
    ) {
        return getDelegate().isDomainExist(domain, username);
    }

}
